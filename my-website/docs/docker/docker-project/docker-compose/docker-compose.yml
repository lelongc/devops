version: '3.8'

services:
  # Reverse Proxy
  nginx:
    build:
      context: ../nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/ssl:/etc/ssl/certs:ro
      - static_volume:/static
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - API_URL=http://backend:8080
    volumes:
      - static_volume:/usr/share/nginx/html
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Backend Service
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://appuser:${DB_PASSWORD}@postgres:5432/myapp
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    env_file:
      - ../env/.env.production
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Database Service
  postgres:
    build:
      context: ../database
      dockerfile: Dockerfile
    environment:
      - POSTGRES_DB=myapp
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backup
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Cache Service
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_backup:/backup
      - ../scripts/backup.sh:/backup.sh:ro
    networks:
      - app-network
    depends_on:
      - postgres
    entrypoint: ["sh", "/backup.sh"]
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  postgres_backup:
    driver: local
  static_volume:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

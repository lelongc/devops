# Universal Docker Compose template for any project type
version: '3.8'

services:
  # Frontend Service (React/Vue/Angular)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${FRONTEND_TARGET:-production}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - API_URL=${API_URL:-http://backend:8080}
    volumes:
      - frontend_assets:/usr/share/nginx/html
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Backend Service (Node.js/Python/Java/Go/.NET)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${BACKEND_TARGET:-production}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:pass@postgres:5432/dbname}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET:-changeme}
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      replicas: ${BACKEND_REPLICAS:-2}
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Database Service (PostgreSQL/MySQL/MongoDB)
  postgres:
    build:
      context: ./database
      dockerfile: Dockerfile
    environment:
      - POSTGRES_DB=${DB_NAME:-myapp}
      - POSTGRES_USER=${DB_USER:-user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backup
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  # Cache Service (Redis/Memcached)
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Message Queue (RabbitMQ/Apache Kafka)
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-changeme}
    ports:
      - "${RABBITMQ_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    restart: unless-stopped

  # Search Engine (Elasticsearch)
  elasticsearch:
    build:
      context: ./search
      dockerfile: Dockerfile
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app-network
    restart: unless-stopped

  # Load Balancer (Nginx/HAProxy)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - frontend_assets:/usr/share/nginx/html:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Monitoring (Prometheus)
  prometheus:
    build:
      context: ./monitoring/prometheus
      dockerfile: Dockerfile
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/config:/etc/prometheus:ro
    networks:
      - monitoring
    restart: unless-stopped

  # Visualization (Grafana)
  grafana:
    build:
      context: ./monitoring/grafana
      dockerfile: Dockerfile
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - monitoring
    restart: unless-stopped

  # Log Aggregation (Elasticsearch for logs)
  logstash:
    build:
      context: ./logging/logstash
      dockerfile: Dockerfile
    ports:
      - "${LOGSTASH_PORT:-5044}:5044"
    environment:
      - "LS_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ./logging/logstash/pipeline:/usr/share/logstash/pipeline:ro
    depends_on:
      - elasticsearch
    networks:
      - logging
    restart: unless-stopped

  # Log Visualization (Kibana)
  kibana:
    build:
      context: ./logging/kibana
      dockerfile: Dockerfile
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - logging
    restart: unless-stopped

  # Background Jobs/Workers
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: ["python", "worker.py"]
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:pass@postgres:5432/dbname}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      replicas: ${WORKER_REPLICAS:-1}

  # Cron Jobs/Scheduler
  scheduler:
    build:
      context: ./scheduler
      dockerfile: Dockerfile
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:pass@postgres:5432/dbname}
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped

  # Development Tools (only in development)
  adminer:
    image: adminer:latest
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    depends_on:
      - postgres
    networks:
      - app-network
    profiles:
      - development

  # Testing (only in test environment)
  test-runner:
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    command: ["npm", "test"]
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://test:test@postgres-test:5432/test_db
    depends_on:
      - postgres-test
    networks:
      - test-network
    profiles:
      - test

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  frontend_assets:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring:
    driver: bridge
  logging:
    driver: bridge
  test-network:
    driver: bridge
